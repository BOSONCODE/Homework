Week 11-12:
之前两周学习完了有关graph的代码，感觉那部分相对还是蛮轻松的，这周就开

始啃决策树的代码，这是个占有接近三千行代码的文件，里面写了好多树，这

颗树的启发式选取节点真的是让人感到无语，就因为启发两个字确实多写了不

少代码，尽管还算是管用吧。

学习到的东西：作为对学校学到的C语言的一个补充，之前从来没有遇到的。
位域结构体：
作用: 为了节省内存，在分配结构体内存的时候从以字节为单位分配的，而不

是数据类型
遵循的原则: 
1.只有同种类型的才可以使用位域结构体
2.当一个字节剩下的bit不够供下一个变量使用时，就使用一个字节
3.如果位域的位域长度为0表示是一个空域，同时下一个域应当从下一个字节单

元开始存放

下面有个例子可以测试出位域的变量有没有符号位和数据类型有关
struct Bit_Struct {
	int a : 16;
	int b : 16;
	unsigned int c : 16;
	unsigned int d : 8;
}test;

int main() {
	ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);
	test.a = (1 << 15)-1;
	test.b = (1 << 15);
	test.c = (1 << 16)-1;
	test.d = (1 << 16);
	cout << test.a << endl;
	cout << test.b << endl;
	cout << test.c << endl;
	cout << test.d << endl;
	return 0;
}

另外就是实现数组的扩展
struct MyData{
	int nLen;
	char data[0];
};
如果分配给结构体的大小这个结构体实际大小，后面多余的部分就是这个data

的内容，
struct MyData *p = (struct MyData *)malloc(sizeof(struct MyData) + 

strlen(str));

linux kernel 编程的模板:
Makefile模板:
obj-m := list_rcu_example.o 

# Please set your kernel directory before build
KDIR:=""
(比如说: KDIR:=/lib/modules/$(shell uname -r)/build

ccflags-y += -Wall
ccflags-y += -Werror

default:
	$(MAKE) -C $(KDIR) SUBDIRS=$(PWD) modules

clean:
	rm -rf *.o *.ko *.mod *.symvers *.order *.mod.c

代码运行的命令模板:
执行make之后生成的文件:
	filename.mod.o
	filename.ko
	filename.mod.c
	filename.o
插入模块命令: sudo insmod filename.ko
取出模块命令: sudo rmmod filename.ko
显示运行结果的命令: dmesg | tail -n 10

helloworld.c实例
#include <linux/init.h>
#include <linux/module.h>

static int helloworld_init(void){
	printk(KERN_INFO "helloworld\n");
	return 0;
}

static void helloworld_exit(void){
	return;
}

module_init(helloworld_init);
module_exit(helloworld_exit);



