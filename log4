Week 7-8:
核心算法文档的学习, 主要就是ACL ip技术研究部算法的学习，这个算法实现起来极其复杂，我找全了所有的实现文件，代码加起来足足有5k行, 全都是算法实现相关, 没有那种api的封装啥的。真的是汗颜，而且注释都没有，也是真的牛逼。一口吃不成胖子，慢慢啃。先研读了一下文档，了解了算法原理和框架，这个倒没有花费多长时间，真正花费了很久的是后面代码的学习，毕竟没有注释，有很多函数很莫名其妙。

在学习代码的过程中还看到了一种很妙的宏写法,叫做 do{..}while(0)
这一看这不是多此一举吗, 没必要这么做吧。实际上很好，理由很充分:
消除代码的冗余性而避免使用goto之类的语句:
举个栗子:
void test() {
	int res = f1();
	if (res) {
		do something;
		return;
	}
	int res2 = f2();
	if (res2) {
		do something;
		return;
	}
	do something;
	return;
}
<=>
void test() {
	do {
		int res1 = f1();
		if (res1) break;
		int res2 = f2(); 
		if (res2) break; 
	} while (0);
	do something;
	return;
}
是不是很方便,消除了do something的冗余性

宏中的使用:
http://www.cnblogs.com/lanxuezaipiao/p/3535626.html
do{
 do something;
}while(0)

实际应用, 举个栗子:
#define TEST_ASSERT_EQUAL(condition, value_expected) \
    do{ \
        if ((condition) != (value_expected)) { \
            printf("%s(%d): %s() Failure!!!", __FILE__, __LINE__, __FUNCTION__); \
        } \
    }while(0)

do{...} while(0)在C中是唯一的构造程序, 让你定义的宏总是以相同的方式工作，这样不管怎么使用宏（尤其是在没有用到大括号包围调用宏的语句），宏后面的分号也是相同的效果。

举个栗子:
#define foo(x) bar(x);baz(x)
foo(wolf); <=> bar(wolf);baz(wolf);

但是如果
if(!feral)
	foo(wolf);
<=>
if(!feral)
	bar(wolf);
baz(wolf);
这不是我们想要的

但是为什么不用大括号直接把宏包围起来呢？为什么非得使用do/while(0)逻辑呢?
像这样 #define foo(x)  { bar(x); baz(x); }

if(!feral)
	foo(wolf);
else
	bin(wolf);
<=>
if(!feral){
	bar(wolf);
	baz(wolf);
};
else
	bin(wolf);
//语法错误

由此可以看出geeks高超严谨的编码技术
